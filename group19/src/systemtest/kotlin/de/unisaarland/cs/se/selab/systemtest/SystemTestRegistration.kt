package de.unisaarland.cs.se.selab.systemtest

import de.unisaarland.cs.se.selab.systemtest.basictests.*
import de.unisaarland.cs.se.selab.systemtest.dikusystemtest.FakeFireTest
import de.unisaarland.cs.se.selab.systemtest.dikusystemtest.configtests.VehicleUnavailableSubjectNA
import de.unisaarland.cs.se.selab.systemtest.evasystemtests.*
import de.unisaarland.cs.se.selab.systemtest.janossystemtests.parsertests.NoFirstCurlyBracket
import de.unisaarland.cs.se.selab.systemtest.janossystemtests.parsertests.WrongRoadDeclaration
import de.unisaarland.cs.se.selab.systemtest.janossystemtests.parsertests.logicerrors.*
import de.unisaarland.cs.se.selab.systemtest.janossystemtests.parsertests.syntaxerrors.*
import de.unisaarland.cs.se.selab.systemtest.keensystemtest.*
import de.unisaarland.cs.se.selab.systemtest.maxsystemtest.configtests.*
import de.unisaarland.cs.se.selab.systemtest.maxsystemtest.configtests.DoctorsWrongBase
import de.unisaarland.cs.se.selab.systemtest.maxsystemtest.configtests.IDontBelongHere
import de.unisaarland.cs.se.selab.systemtest.maxsystemtest.configtests.TooMuchCapacity
import de.unisaarland.cs.se.selab.systemtest.maxsystemtest.configtests.WrongAttribute
import de.unisaarland.cs.se.selab.systemtest.runner.SystemTestManager

object SystemTestRegistration {

    /**
     * This part will run their system tests on our implementation. We can use this category to run our system tests
     * on their correct implementation to verify if they are correct and our implementation does behave correctly. This
     * can be done to test system tests before including them into any other pipeline
     *
     * @param manager
     */
    fun registerSystemTestsReferenceImpl(manager: SystemTestManager) {
        manager.registerTest(BrokenMapTestA())
        manager.registerTest(BrokenMapTestB())
        manager.registerTest(BrokenMapTestC())
        manager.registerTest(BrokenMapTestD())
        manager.registerTest(BrokenMapTestE())
        manager.registerTest(BrokenMapTestF())
        // x manager.registerTest(BrokenMapTestG())
        // x manager.registerTest(BrokenMapTestH())
        manager.registerTest(BrokenMapTestI())
        manager.registerTest(BrokenMapTestJ())
        manager.registerTest(BrokenMapTestK())
        manager.registerTest(BrokenMapTestL())
        manager.registerTest(BrokenMapTestM())
        // manager.registerTest(Frankfurt())
        // manager.registerTest(ExampleTest())
        // x manager.registerTest(ExampleTestContinue())
        manager.registerTest(VehicleUnavailableSubjectNA())
        manager.registerTest(FakeFireTest())
        // x manager.registerTest(Stopwaitaminute())
        // x manager.registerTest(Stopwaitaminute2())
        // eva
        manager.registerTest(BaseContainsNoVehicles())
        manager.registerTest(BaseStaffIsZero())
        manager.registerTest(BaseVertexOutOfBounds())
        // x manager.registerTest(CologneReroutingCapacity())
        // x manager.registerTest(CologneSimpler())
        manager.registerTest(DisconnectedRoad())
        manager.registerTest(HammVehiclesTooFarTest5())
        // x manager.registerTest(HammVehiclesTooFarTest10())
        manager.registerTest(HospitalWithDog())

        manager.registerTest(NotEnoughStaffForVehicle())
        manager.registerTest(NotOneOfEveryBase())
        // x manager.registerTest(PoliceStationWithDoctor())
        manager.registerTest(RogueVertex())
        // x manager.registerTest(StandardFilesTest())
        manager.registerTest(SuperSimple())
        // x manager.registerTest(TakeRouteWithLowerIDOne())
        // x manager.registerTest(TakeRouteWithLowerIDOneOneTickCopy())
        // x manager.registerTest(TakeRouteWithLowerIDOneThreeTickCopy())
        // x manager.registerTest(TakeRouteWithLowerIDOneThreeTickCopy())
        // x manager.registerTest(TakeRouteWithLowerIDThree())
        // x manager.registerTest(TakeRouteWithLowerIDThreeOtherEvent())
        // x manager.registerTest(TakeRouteWithLowerIDTwo())
        // x manager.registerTest(TakeVehicleWithLowerIDCOne())
        // x manager.registerTest(TakeVehicleWithLowerIDCTwo())
        manager.registerTest(TwoBaseSameID())
        manager.registerTest(TwoBaseSameLocation())
        manager.registerTest(TwoEmergencySameID())
        manager.registerTest(TwoEventsSameID())
        manager.registerTest(TwoRoadsSameVertices())
        manager.registerTest(TwoVehicleSameID())
        // x manager.registerTest(VehicleAndBaseTypeDontMatch())
        // x manager.registerTest(VehicleBaseIDOutOfBounds())
        manager.registerTest(VehicleStaffIsZero())
        manager.registerTest(VehicleTooHigh())
        manager.registerTest(VillageNoMain())
        helpRegisterPipelineOne(manager)
    }

    /**
     *
     *
     * @param manager
     */
    private fun helpRegisterPipelineOne(manager: SystemTestManager) {
        // janos
        manager.registerTest(DirectConnectionOtherVillage())
        manager.registerTest(NegativeRoadHeight())
        manager.registerTest(NegativeRoadWeight())
        manager.registerTest(NegativeVertex())
        manager.registerTest(NewConnectionBetweenVertices())
        manager.registerTest(NewConnectionSwapped())
        manager.registerTest(NoSideStreetOnMap())
        manager.registerTest(RoadHeightBelowOne())
        manager.registerTest(RoadNameNotUnique())
        manager.registerTest(TunnelLargerThree())
        manager.registerTest(UnconnectedVertex())
        manager.registerTest(VertexConnectedToSelf())
        manager.registerTest(AttributesWronglySpaced())
        manager.registerTest(BracketsMising())
        manager.registerTest(DiagraphTypo())
        manager.registerTest(InvalidCharactersAttributeNames())
        manager.registerTest(InvalidCharactersCountyName())
        manager.registerTest(NoSecondCurlyBracket())
        manager.registerTest(RoadsBeforeVertices())
        manager.registerTest(SemicolonMissing())
        manager.registerTest(VerticesRoadsAlternately())
        manager.registerTest(WrongAttributeDeclarations())
        // x manager.registerTest(ZeroBeforeNull())
        // x manager.registerTest(ZeroBeforeNullRoads())
        manager.registerTest(NoFirstCurlyBracket())
        manager.registerTest(WrongRoadDeclaration())
        // manager.registerTest(DisabledDuringFire())
        // x manager.registerTest(TriangleAllTunnel())
        manager.registerTest(TriangleDoNotHurry())
        manager.registerTest(TriangleHospitalNoDoctor())
        // x manager.registerTest(TriangleMyPriorityIsHigher())
        // x manager.registerTest(TriangleNoStaffForVehicle())
        // x manager.registerTest(TriangleNotEnoughVehicles())
        manager.registerTest(TriangleNothingHappened())
        manager.registerTest(TrianglePoliceStationNoDog())
        manager.registerTest(DoctorsWrongBase())
        manager.registerTest(IDontBelongHere())
        manager.registerTest(LocationDoesNotExist())
        manager.registerTest(LocationDoesNotExist2())
        manager.registerTest(NothingImportant())
        manager.registerTest(TooMuchCapacity())
        manager.registerTest(WeDontHaveDogsOrDocs())
        manager.registerTest(WrongAttribute())
        manager.registerTest(WrongAttribute2())
        // x manager.registerTest(ReallocationInBielefeld())
        // x manager.registerTest(RequestMadness())
        // all the tests
        manager.registerTest(DisconnectedRoad()) // even though strongly connected is guaranteed
        manager.registerTest(CountyRoadButVillage())
        manager.registerTest(VehicleTooHigh())
        manager.registerTest(VillageNoMain())
        manager.registerTest(TwoVehicleSameID())
        manager.registerTest(TwoEmergencySameID())
        // x manager.registerTest(VehicleAndBaseTypeDontMatch())
        manager.registerTest(RogueVertex())
        manager.registerTest(TwoRoadsSameVertices())
        manager.registerTest(TwoEventsSameID())
    }

    /**
     * This part runs our system tests for the validation process, if they all pass, they will be used to find mutants
     * inside the validation process. That means after the log Simulation starts, the simulation will behave correctly,
     * and it is only intended to find bugs for the validation of the config files
     *
     * @param manager
     */
    fun registerSystemTestsMutantValidation(manager: SystemTestManager) {
        manager.registerTest(BrokenMapTestA())
        manager.registerTest(BrokenMapTestB())
        manager.registerTest(BrokenMapTestC())
        manager.registerTest(BrokenMapTestD())
        manager.registerTest(BrokenMapTestE())
        manager.registerTest(BrokenMapTestF())
        // x manager.registerTest(BrokenMapTestG())
        // x manager.registerTest(BrokenMapTestH())
        manager.registerTest(BrokenMapTestI())
        manager.registerTest(BrokenMapTestJ())
        manager.registerTest(BrokenMapTestK())
        manager.registerTest(BrokenMapTestL())
        manager.registerTest(BrokenMapTestM())
        // manager.registerTest(Frankfurt())
        manager.registerTest(ExampleTest())
        // x manager.registerTest(ExampleTestContinue())
        manager.registerTest(VehicleUnavailableSubjectNA())
        manager.registerTest(FakeFireTest())
        // x manager.registerTest(Stopwaitaminute())
        // x manager.registerTest(Stopwaitaminute2())
        // eva
        manager.registerTest(BaseContainsNoVehicles())
        manager.registerTest(BaseStaffIsZero())
        manager.registerTest(BaseVertexOutOfBounds())
        // x manager.registerTest(CologneReroutingCapacity())
        // x manager.registerTest(CologneSimpler())
        manager.registerTest(DisconnectedRoad())
        manager.registerTest(HammVehiclesTooFarTest5())
        // x manager.registerTest(HammVehiclesTooFarTest10())
        manager.registerTest(HospitalWithDog())

        manager.registerTest(NotEnoughStaffForVehicle())
        manager.registerTest(NotOneOfEveryBase())
        // x manager.registerTest(PoliceStationWithDoctor())
        manager.registerTest(RogueVertex())
        // x manager.registerTest(StandardFilesTest())
        manager.registerTest(SuperSimple())
        // x manager.registerTest(TakeRouteWithLowerIDOne())
        // x manager.registerTest(TakeRouteWithLowerIDOneOneTickCopy())
        // x manager.registerTest(TakeRouteWithLowerIDOneThreeTickCopy())
        // x manager.registerTest(TakeRouteWithLowerIDOneThreeTickCopy())
        // x manager.registerTest(TakeRouteWithLowerIDThree())
        // x manager.registerTest(TakeRouteWithLowerIDThreeOtherEvent())
        // x manager.registerTest(TakeRouteWithLowerIDTwo())
        // x manager.registerTest(TakeVehicleWithLowerIDCOne())
        // x manager.registerTest(TakeVehicleWithLowerIDCTwo())
        manager.registerTest(TwoBaseSameID())
        manager.registerTest(TwoBaseSameLocation())
        manager.registerTest(TwoEmergencySameID())
        manager.registerTest(TwoEventsSameID())
        manager.registerTest(TwoRoadsSameVertices())
        manager.registerTest(TwoVehicleSameID())
        // x manager.registerTest(VehicleAndBaseTypeDontMatch())
        // x manager.registerTest(VehicleBaseIDOutOfBounds())
        manager.registerTest(VehicleStaffIsZero())
        manager.registerTest(VehicleTooHigh())
        manager.registerTest(VillageNoMain())
        manager.registerTest(DirectConnectionOtherVillage())
        manager.registerTest(NegativeRoadHeight())
        manager.registerTest(NegativeRoadWeight())
        manager.registerTest(NegativeVertex())
        manager.registerTest(NewConnectionBetweenVertices())
        manager.registerTest(NewConnectionSwapped())
        manager.registerTest(NoSideStreetOnMap())
        manager.registerTest(RoadHeightBelowOne())
        manager.registerTest(RoadNameNotUnique())
        manager.registerTest(TunnelLargerThree())
        manager.registerTest(UnconnectedVertex())
        manager.registerTest(VertexConnectedToSelf())
        manager.registerTest(AttributesWronglySpaced())
        manager.registerTest(BracketsMising())
        manager.registerTest(DiagraphTypo())
        manager.registerTest(InvalidCharactersAttributeNames())
        extractedA(manager)
    }

    private fun extractedA(manager: SystemTestManager) {
        manager.registerTest(InvalidCharactersCountyName())
        manager.registerTest(NoSecondCurlyBracket())
        manager.registerTest(RoadsBeforeVertices())
        manager.registerTest(SemicolonMissing())
        manager.registerTest(VerticesRoadsAlternately())
        manager.registerTest(WrongAttributeDeclarations())
        // x manager.registerTest(ZeroBeforeNull())
        // x manager.registerTest(ZeroBeforeNullRoads())
        manager.registerTest(NoFirstCurlyBracket())
        manager.registerTest(WrongRoadDeclaration())
        // manager.registerTest(DisabledDuringFire())
        // x manager.registerTest(TriangleAllTunnel())
        manager.registerTest(TriangleDoNotHurry())
        manager.registerTest(TriangleHospitalNoDoctor())
        // x manager.registerTest(TriangleMyPriorityIsHigher())
        // x manager.registerTest(TriangleNoStaffForVehicle())
        // x manager.registerTest(TriangleNotEnoughVehicles())
        manager.registerTest(TriangleNothingHappened())
        manager.registerTest(TrianglePoliceStationNoDog())
        manager.registerTest(DoctorsWrongBase())
        manager.registerTest(IDontBelongHere())
        manager.registerTest(LocationDoesNotExist())
        manager.registerTest(LocationDoesNotExist2())
        manager.registerTest(NothingImportant())
        manager.registerTest(TooMuchCapacity())
        manager.registerTest(WeDontHaveDogsOrDocs())
        manager.registerTest(WrongAttribute())
        manager.registerTest(WrongAttribute2())
        // x manager.registerTest(ReallocationInBielefeld())
        // x manager.registerTest(RequestMadness())
        // all the tests
        manager.registerTest(DisconnectedRoad()) // even though strongly connected is guaranteed
        manager.registerTest(CountyRoadButVillage())
        manager.registerTest(VehicleTooHigh())
        manager.registerTest(VillageNoMain())
        manager.registerTest(TwoVehicleSameID())
        manager.registerTest(TwoEmergencySameID())
        // x manager.registerTest(VehicleAndBaseTypeDontMatch())
        manager.registerTest(RogueVertex())
        manager.registerTest(TwoRoadsSameVertices())
        manager.registerTest(TwoEventsSameID())
    }

    /**
     * The last part runs our system tests for the simulation process, if they all pass, they will be used to find
     * mutants inside the simulation process. That means before the log Simulation starts, the validation will behave
     * correctly, and it is only intended to find bugs for the simulation process
     *
     * @param manager
     */
    fun registerSystemTestsMutantSimulation(manager: SystemTestManager) {
        manager.registerTest(BrokenMapTestA())
        manager.registerTest(BrokenMapTestB())
        manager.registerTest(BrokenMapTestC())
        manager.registerTest(BrokenMapTestD())
        manager.registerTest(BrokenMapTestE())
        manager.registerTest(BrokenMapTestF())
        // x manager.registerTest(BrokenMapTestG())
        // x manager.registerTest(BrokenMapTestH())
        manager.registerTest(BrokenMapTestI())
        manager.registerTest(BrokenMapTestJ())
        manager.registerTest(BrokenMapTestK())
        manager.registerTest(BrokenMapTestL())
        manager.registerTest(BrokenMapTestM())
        // x manager.registerTest(Frankfurt())
        manager.registerTest(ExampleTest())
        // x manager.registerTest(ExampleTestContinue())
        manager.registerTest(VehicleUnavailableSubjectNA())
        manager.registerTest(FakeFireTest())
        // x manager.registerTest(Stopwaitaminute())
        // x manager.registerTest(Stopwaitaminute2())
        // eva
        manager.registerTest(BaseContainsNoVehicles())
        manager.registerTest(BaseStaffIsZero())
        manager.registerTest(BaseVertexOutOfBounds())
        // x manager.registerTest(CologneReroutingCapacity())
        // x manager.registerTest(CologneSimpler())
        manager.registerTest(DisconnectedRoad())
        manager.registerTest(HammVehiclesTooFarTest5())
        // x manager.registerTest(HammVehiclesTooFarTest10())
        manager.registerTest(HospitalWithDog())

        manager.registerTest(NotEnoughStaffForVehicle())
        manager.registerTest(NotOneOfEveryBase())
        // x manager.registerTest(PoliceStationWithDoctor())
        manager.registerTest(RogueVertex())
        // x manager.registerTest(StandardFilesTest())
        manager.registerTest(SuperSimple())
        // x manager.registerTest(TakeRouteWithLowerIDOne())
        // x manager.registerTest(TakeRouteWithLowerIDOneOneTickCopy())
        // x manager.registerTest(TakeRouteWithLowerIDOneThreeTickCopy())
        // x manager.registerTest(TakeRouteWithLowerIDOneThreeTickCopy())
        // x manager.registerTest(TakeRouteWithLowerIDThree())
        // x manager.registerTest(TakeRouteWithLowerIDThreeOtherEvent())
        // x manager.registerTest(TakeRouteWithLowerIDTwo())
        // x manager.registerTest(TakeVehicleWithLowerIDCOne())
        // x manager.registerTest(TakeVehicleWithLowerIDCTwo())
        manager.registerTest(TwoBaseSameID())
        manager.registerTest(TwoBaseSameLocation())
        manager.registerTest(TwoEmergencySameID())
        manager.registerTest(TwoEventsSameID())
        manager.registerTest(TwoRoadsSameVertices())
        manager.registerTest(TwoVehicleSameID())
        // x manager.registerTest(VehicleAndBaseTypeDontMatch())
        // x manager.registerTest(VehicleBaseIDOutOfBounds())
        manager.registerTest(VehicleStaffIsZero())
        manager.registerTest(VehicleTooHigh())
        manager.registerTest(VillageNoMain())
        manager.registerTest(DirectConnectionOtherVillage())
        manager.registerTest(NegativeRoadHeight())
        manager.registerTest(NegativeRoadWeight())
        manager.registerTest(NegativeVertex())
        manager.registerTest(NewConnectionBetweenVertices())
        manager.registerTest(NewConnectionSwapped())
        manager.registerTest(NoSideStreetOnMap())
        manager.registerTest(RoadHeightBelowOne())
        manager.registerTest(RoadNameNotUnique())
        extracted(manager)
    }

    private fun extracted(manager: SystemTestManager) {
        manager.registerTest(TunnelLargerThree())
        manager.registerTest(UnconnectedVertex())
        manager.registerTest(VertexConnectedToSelf())
        manager.registerTest(AttributesWronglySpaced())
        manager.registerTest(BracketsMising())
        manager.registerTest(DiagraphTypo())
        manager.registerTest(InvalidCharactersAttributeNames())
        manager.registerTest(InvalidCharactersCountyName())
        manager.registerTest(NoSecondCurlyBracket())
        manager.registerTest(RoadsBeforeVertices())
        manager.registerTest(SemicolonMissing())
        manager.registerTest(VerticesRoadsAlternately())
        manager.registerTest(WrongAttributeDeclarations())
        // x manager.registerTest(ZeroBeforeNull())
        // x manager.registerTest(ZeroBeforeNullRoads())
        manager.registerTest(NoFirstCurlyBracket())
        manager.registerTest(WrongRoadDeclaration())
        // manager.registerTest(DisabledDuringFire())
        // x manager.registerTest(TriangleAllTunnel())
        manager.registerTest(TriangleDoNotHurry())
        manager.registerTest(TriangleHospitalNoDoctor())
        // x manager.registerTest(TriangleMyPriorityIsHigher())
        // x manager.registerTest(TriangleNoStaffForVehicle())
        // x manager.registerTest(TriangleNotEnoughVehicles())
        manager.registerTest(TriangleNothingHappened())
        manager.registerTest(TrianglePoliceStationNoDog())
        manager.registerTest(DoctorsWrongBase())
        manager.registerTest(IDontBelongHere())
        manager.registerTest(LocationDoesNotExist())
        manager.registerTest(LocationDoesNotExist2())
        manager.registerTest(NothingImportant())
        manager.registerTest(TooMuchCapacity())
        manager.registerTest(WeDontHaveDogsOrDocs())
        manager.registerTest(WrongAttribute())
        manager.registerTest(WrongAttribute2())
        // x manager.registerTest(ReallocationInBielefeld())
        // x manager.registerTest(RequestMadness())
        // all the tests
        manager.registerTest(DisconnectedRoad()) // even though strongly connected is guaranteed
        manager.registerTest(CountyRoadButVillage())
        manager.registerTest(VehicleTooHigh())
        manager.registerTest(VillageNoMain())
        manager.registerTest(TwoVehicleSameID())
        manager.registerTest(TwoEmergencySameID())
        // x manager.registerTest(VehicleAndBaseTypeDontMatch())
        manager.registerTest(RogueVertex())
        manager.registerTest(TwoRoadsSameVertices())
        manager.registerTest(TwoEventsSameID())
    }
}
